/*Program to download the mails from mail servers and then to store
  them in tdb store using rdf model*/
//import all the classes needed  




import java.io.*;
import java.util.*;
import javax.mail.*;
import javax.mail.Flags.Flag;
import javax.mail.internet.*;
import com.sun.mail.imap.IMAPFolder;
import com.sun.mail.imap.IMAPMessage;
import static com.hp.hpl.jena.query.ReadWrite.READ ;
import static com.hp.hpl.jena.query.ReadWrite.WRITE ;
import com.hp.hpl.jena.query.ReadWrite ;
import com.hp.hpl.jena.query.Dataset ;
import com.hp.hpl.jena.query.Query ;
import com.hp.hpl.jena.query.QueryExecution ;
import com.hp.hpl.jena.query.QueryExecutionFactory ;
import com.hp.hpl.jena.query.QueryFactory ;
import com.hp.hpl.jena.query.QuerySolution ;
import com.hp.hpl.jena.query.ResultSet ;
import com.hp.hpl.jena.tdb.TDBFactory ;
import email.*; // import this to add properties as entities of email
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.*;
import com.hp.hpl.jena.vocabulary.*;
import com.hp.hpl.jena.update.* ;


public class syncdelete1 {
    //method to get contents of multipart email
    private static String getText(Part p) throws MessagingException, IOException 
    {
        if (p.isMimeType("multipart/alternative")) 
        {  
            Multipart mp = (Multipart)p.getContent();
            String text = null;
            for (int i = 0; i < mp.getCount(); i++) 
            {
                Part bp = mp.getBodyPart(i);
                if (bp.isMimeType("text/plain"))
                {
                    if (text == null)
                        text = getText(bp);
                    continue;
                } 
                else if (bp.isMimeType("text/html"))
                {
                    String s = getText(bp);
                    if (s != null)
                        return s;
                } 
                else 
                {
                    return getText(bp);
                }
            }
            return text;
        } 
        else if (p.isMimeType("multipart/*")) 
        {
            Multipart mp = (Multipart)p.getContent();
            for (int i = 0; i < mp.getCount(); i++)
            {
                String s = getText(mp.getBodyPart(i));
                if (s != null)
                    return s;
            }
        }
        else
        { 
            return p.getContent().toString();
        }  
        return null; 
    } 



    public static void main(String[] args) throws MessagingException, IOException 
    {
        IMAPFolder folder = null;
        Store store = null;
        String subjec = "nosubject";
        Flag flag = null;
        String lastdate="Thu May 22 14:07:24 IST 2014";
        long lastuid;
        long lastvalidity=606896160;
        String dat="x",encod="x",senderaddr="x",receiveraddr="x",cont="x";
        //Directory where the tdb files will be stored
         String directory = "MYDATABASES/DATA2" ;
         //create the dataset for the tdb store
        
        
        //write to the tdb dataset
        
        try 
        { //connecting to the server to download the emails
          Properties props = System.getProperties();
          props.setProperty("mail.store.protocol", "imaps");

          Session session = Session.getDefaultInstance(props, null);

          store = session.getStore("imaps");
          store.connect("imap.gmail.com","hjcooljohny75@gmail.com", "9407177781");

          //folder = (IMAPFolder) store.getFolder("[Gmail]/Spam"); // This doesn't work for other email account
          //to select the paticular types of mails
          folder = (IMAPFolder) store.getFolder("inbox");// This works for both email account
           UIDFolder uf = (UIDFolder)folder;
         ;
          if(!folder.isOpen())
          folder.open(Folder.READ_WRITE);
          Message[] messages = folder.getMessages();
          System.out.println("No of Messages : " + folder.getMessageCount());
          System.out.println("No of Unread Messages : " + folder.getUnreadMessageCount());
          System.out.println(messages.length);
           long n=uf.getUIDValidity();
              System.out.println("UIDvalidity:"+n);
              if(n==lastvalidity)
              {}
              else
                {System.out.println("database inconsistent");
                  return;}
          //Displaying the info. of the messages
          long uid=0;
           for (int i=messages.length-1; i > messages.length-1000;i--) 
          {   
            //System.out.println(i);
           subjec="nosubject" ;dat="x";encod="x";senderaddr="x";receiveraddr="x";cont="x";
            MimeMessage msg = (MimeMessage) messages[i];
            //creating rdf model of the message
            /*typecating of these email entities to strings so
             that they can be placed as arguments in addProperty
              function*/
              //checking for null values to prevent errors
             
              if(i==messages.length-1)
               lastuid= uf.getUID(msg)+1;
             else
             lastuid=uid; 
               uid = uf.getUID(msg);
          System.out.println("UID:"+uid);
            if(uid==(lastuid-1))
              {}
            else
            {

              System.out.println("msgdeleted");
            //remove entries from database

              for(int j=(int)uid+1;j<lastuid;j++)
           { String s="DELETE WHERE{?x <UID:> '"+j+"' }";
        //load the dataset    
              Dataset ds = TDBFactory.createDataset(directory) ;
        try{
           
  
        Model model = ds.getDefaultModel() ;
        ds.begin(ReadWrite.READ) ;
        //Scanner in = new Scanner(System.in);
         //System.out.println("Enter a string");
            
           // s = in.nextLine();

    
           UpdateRequest ur = UpdateFactory.create(s);
            UpdateAction.parseExecute(s	,model);
            
            //ResultSet rs = qExec.execSelect() ;
            // QueryExecUtils.executeQuery(q, qExec) ;
              } finally
              {//qExec.close() ;
              ds.commit();
              ds.end();
             }

              }







            break;}
            lastuid=uid;  







           
          }
        }
        finally 
        {  //closing the connection
          if (folder != null && folder.isOpen()) { folder.close(true); }
          if (store != null) { store.close(); }
        }


     //closing the dataset
  
    }
}
